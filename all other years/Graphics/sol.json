{"editor":{"base":{"vertex":{"source":"attribute vec4 vertex_worldSpace;\nattribute vec2 textureCoordinate_input;\nattribute vec3 normal_worldSpace;\n\nuniform mat4 mMatrix;\nuniform mat4 vMatrix;\nuniform mat4 pMatrix;\n\nvarying vec4 position_camSpace;\nvarying vec3 normal_camSpace;\n\n//Vertex shader compute the vectors per vertex\nvoid main(void)\n{\n  //Put the vertex in the correct coordinate system by applying the model view matrix\n  vec4 vertex_camSpace = vMatrix*mMatrix*vertex_worldSpace;\n  position_camSpace = vertex_camSpace;\n\n  //Apply the model-view transformation to the normal (only rotation, no translation)\n  //Normals put in the camera space\n  normal_camSpace =  normalize(mat3(vMatrix*mMatrix)*normal_worldSpace);\n\n  gl_Position = pMatrix * vertex_camSpace;\n}","isLinked":true},"fragment":{"source":"precision highp float;\n\nvarying vec4 position_camSpace;\nvarying vec3 normal_camSpace;\n\nuniform vec4 lightPosition_camSpace;\n\nuniform vec4 ambient;\nuniform vec4 diffuse;\nuniform vec4 specular;\nuniform float shininess;\n\n//Fragment shader computes the final color\nvoid main(void)\n{\n  vec3 normal = normalize(normal_camSpace);\n  vec3 lightDirection = normalize(lightPosition_camSpace.xyz-position_camSpace.xyz);\n  vec3 viewingDirection = normalize(-position_camSpace.xyz);\n  vec3 halfVector = normalize(lightDirection+viewingDirection);\t\n\n  float lightDistance = length(lightPosition_camSpace.xyz - position_camSpace.xyz);\n  float attenuation = 1.0 / (lightDistance*lightDistance);\n  float lightIntensity = 500.0;\n\n  //Blinn Phong shading\n  vec4 ambientColor = ambient;\n  vec4 diffuseColor = clamp(lightIntensity*attenuation*max(0.0, dot(normal, lightDirection))*diffuse, 0.0, 1.0);\n  vec4 specularColor = clamp(lightIntensity*attenuation*pow(max(0.0, dot(halfVector, normal)), shininess)*specular, 0.0, 1.0);\n\n  gl_FragColor = ambientColor + diffuseColor + specularColor;\n}","isLinked":true}},"R2T":{"vertex":{"source":"attribute vec3 vertex_worldSpace;\nattribute vec2 textureCoordinate_input;\n\nvarying vec2 varyingTextureCoordinate;\n\nvoid main() {\n  gl_Position = vec4(vertex_worldSpace, 1.0);\n  varyingTextureCoordinate = textureCoordinate_input;\n}","isLinked":true},"fragment":{"source":"precision mediump float;\n\nuniform sampler2D textureRendered;\n\nvarying vec2 varyingTextureCoordinate;\n\nvoid main() {\n  gl_FragColor = texture2D(textureRendered, varyingTextureCoordinate.st);\n}","isLinked":true}}},"camera":{"position":[24.21857013100627,15.576586317572657,23.234259607325484],"target":[0,0,0],"nearClipping":0.001,"farClipping":10000,"projection":"Perspective","perspectiveFov":45,"orthographicFov":30},"model":{"position":[0,-8,0],"rotationAxis":[1,0,0],"rotationAngle":-90,"scale":[1,1,1],"depthTest":"LESS","faceCulling":"","frontFace":"CCW","showWorldCoordinates":false},"uniforms":{"base":{"value":{"mMatrix":{"attachment":"Model Matrix"},"vMatrix":{"attachment":"View Matrix"},"pMatrix":{"attachment":"Projection Matrix"},"lightPosition_camSpace":{"value":[0,0,0,0]},"ambient":{"value":[0.5,0,0,1]},"diffuse":{"value":[1,0,0,1]},"specular":{"value":[1,1,1,1]},"shininess":{"value":[10]}}},"R2T":{"value":{"textureRendered":{"attachment":"Base Pass color"}}}}}